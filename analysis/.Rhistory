# Data manipulation and visualization
install.packages("tidyr", repos='http://cran.us.r-project.org')
install.packages("raster", repos='http://cran.us.r-project.org')
install.packages("AICcmodavg", repos='http://cran.us.r-project.org')
# Spatial data analysis
install.packages("sp", repos=c('http://R-Forge.R-project.org', 'http://cran.rstudio.com'))
install.packages("sp", repos = c("http://R-Forge.R-project.org", "http://cran.rstudio.com"))
sessionInfo()
sessionInfo()
# Data manipulation and visualization
library(tidyr)
library(ggplot2)
#library(gridExtra)
# Spatial data analysis
library(sp)
library(raster)
#library(rgdal)
#library(sf)
library(RColorBrewer)
#library(ggmap)
setwd("../final-project/analysis)
#' getCI
#'
#' @param vec a vector
#' @param n_samp number of times to sample data
#'
#' @return upper and lower bootstrap confidence intervals
#'
#'
#' @examples
#'    getCI(1:20, 2000)
#' @export
getCI <- function(vec, n_samp=1000) {
smp <- replicate(n_samp, mean(sample(vec, replace = TRUE), na.rm = TRUE))
CIs <-quantile(smp, c(0.025, 0.975), na.rm = T)
return(CIs)
}
#' testNormality
#'
#' @param dat a data.frame where columns = time intervals and rows = # prey deliveries
#' @param margin.a margin for apply statement running shapiro.test. default = 2.
#'
#' @return vector of p.values for each column of dat
#'
#'
#' @examples
#'    testNormality(pdM_inc, 2)
#' @export
testNormality <- function(dat, margin = 2) {
norms <- apply(dat, margin, FUN = shapiro.test)
return(sapply(norms, function(x){x[["p.value"]]}))
}
#' testNormality
#'
#' @param dat a data.frame where columns = time intervals and rows = # prey deliveries
#' @param margin.a margin for apply statement running shapiro.test. default = 2.
#'
#' @return vector of p.values for each column of dat
#'
#'
#' @examples
#'    testNormality(pdM_inc, 2)
#' @export
testNormality <- function(dat, margin = 2) {
norms <- apply(dat, margin, FUN = shapiro.test)
return(sapply(norms, function(x){x[["p.value"]]}))
}
#' testWilcox
#'
#' @param a a data.frame where columns = time intervals and rows = # prey deliveries
#' @param b a second data.frame where columns = time intervals and rows = # prey deliveries
#'
#' @return data.frame of p values (values) and corresponding time intervals (ind)
#'
#'
#' @examples
#'    testWilcox(pdMGSA_inc, pdHFSA_inc)
#' @export
testWilcox <- function(a, b){
tmp <- mapply(wilcox.test, a, b, exact = FALSE)
p.values <- stack(mapply(function(x, y) wilcox.test(x, y, exact = FALSE)$p.value, a, b))
return(p.values)
}
#' getCI
#'
#' @param vec a vector
#' @param n_samp number of times to sample data
#'
#' @return upper and lower bootstrap confidence intervals
#'
#'
#' @examples
#'    getCI(1:20, 2000)
#' @export
getCI <- function(vec, n_samp=1000) {
smp <- replicate(n_samp, mean(sample(vec, replace = TRUE), na.rm = TRUE))
CIs <-quantile(smp, c(0.025, 0.975), na.rm = T)
return(CIs)
}
# Load Boundary
boundary_sf <- st_read("../analysis/images/hayman.shp")
# Get extent
ext <- st_bbox(boundary_sf)
sessionInfo()
sessionInfo()
