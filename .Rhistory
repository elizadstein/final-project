paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
submit()
submit()
mad_libs("Tokyo", "smart", "insect")
submit()
submit()
"I" %p% "love" %p% "R!"
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my sqrt <- sqrt(z - 1)
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 1000)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- "C:/Users/eliza/Dropbox/LSU/Reproducible Research in R/Notes"
old.dir <- getwd()
dir.create(testdir)
dir.create(old.dir, "testdir")
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create('mytest.R')
ls()
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy(mytest2.R, mytest3.R)
file.copy("mytest2.R", "mytest3.R")
?file.path
file.path(mytest3.R)
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`?`
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length-30)
seq(5, 10, length=30)
my seq <- seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq
seq_along(my_seq)
rep(o, times = 40)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Eliza")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
play()
paste("Hello", "world!", collapse = " ")
nxt()
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_daya == NA
my_data == NA
sum(my_na)
play()
length(which(is.na(my_data)))
nxt
nxt()
my_data
0/0
Inf - Inf
?summarise
?dplyr::summarise
data_frame <- data.frame('a'=runif(10,0,10), 'b'=runif(10,0,10), 'c'=runif(10,0,10),'ax'=runif(10,0,10) )
View(data_frame)
for(i in 1:10){
a[[i]] <- runif(10000)
print(object.size(a))
}
a <- list()
for(i in 1:10){
a[[i]] <- runif(10000)
print(object.size(a))
}
library(swirl)
library("swirl")
install.packages("swirl")
library(swirl)
swirl()
von <- httr::GET('http://openlibrary.org/search.json?q=vonnegut')
str(von)
vonInfo <- jsonlite::fromJSON(content(von, "text"), simplifyVector = FALSE)
library(httr)
library(jsonlite)
vonInfo <- jsonlite::fromJSON(content(von, "text"), simplifyVector = FALSE)
length(vonInfo)
length(vonInfo2[[4]])
von2 <- httr::GET('http://openlibrary.org/search.json?author=vonnegut')
str(von2)
names(von2)
vonInfo2 <- jsonlite::fromJSON(content(von2, "text"), simplifyVector = FALSE)
length(vonInfo2[[4]])
names(vonInfo)
tad <- httr::GET('https://api.github.com/users/taddallas')
tadInfo <- jsonlite::fromJSON(content(tad, "text"), simplifyVector = FALSE)
library(httr)
library(jsonlite)
tadInfo <- jsonlite::fromJSON(content(tad, "text"), simplifyVector = FALSE)
names(tadInfo)
plotAll <- ggplot(data = ciAll) +
geom_point(aes(x = time, y = mean, color = study_area, group = study_area),
position = position_dodge(width=0.75)) +
geom_errorbar(aes(x=time, ymax = ci_h, ymin=ci_l, color = study_area,
group = study_area),
position = position_dodge(width=0.75)) +
labs(x = "Time After Sunset (minutes)", y = "Mean Prey Deliveries",
title = "Average Prey Deliveries Throughout Night", color = "Study Area") +
theme_minimal() +
facet_grid(~ stage)
plot(plotNest)
plot(plotInc)
par(mfrow = c(1, 2))
# Chunk 1
#install.packages("tidyverse")
library(tidyverse)
# Chunk 2
setwd("C:/Users/eliza/Documents/final-project")
pdOriginal <- read.csv("./data/pd_main.csv")
#rename the first column, which imported with a special character
names(pdOriginal)[1] <- "nest"
# Chunk 3
pdHM <- pdOriginal %>%
separate(col = nest, into = c("study_site", "territory"), sep = 1, remove = TRUE) %>%
filter(study_site == "B" | study_site == "C", sex == "M")
# Chunk 4
#str(pdHM) #columns 't180' and 't225' are character classes, "nest_age" is character class
#unique(pdHM$t180) #at least one cell has an asterisk after the value
#unique(pdHM$t225) #same here
#unique(pdHM$nest_age) #"pred" and "" can be converted to NA
#remove asterisks
pdClean <- pdHM %>%
mutate(t180 = gsub("\\*", "", t180)) %>%
mutate(t225 = gsub("\\*", "", t225))
#change these columns to numeric
pdClean$t180 <- as.integer(pdClean$t180)
pdClean$t225 <- as.integer(pdClean$t225)
pdClean$nest_age <- as.integer(pdClean$nest_age) #warning here is ok--NAs are replacing "pred" and "" values
# Chunk 5
#create independet dfs for HFSA (nestling and incubation stage) and MGSA (nestling and incubation state).
#select relevant columns, add column for stage, rename study sites, drop NAs
pdStage <- pdClean %>%
select(study_site, nest_age, t15:t240) %>%
mutate(
stage =
ifelse(nest_age < 22, "incubation", "nestling"),
study_site =
ifelse(study_site == "B", "MGSA", "HFSA")) %>%
drop_na(stage)
#change column names to remove "t" in front of time interval
colnames(pdStage) <- c("study_site", "nest_age", "15", "30", "45", "60", "75", "90", "105", "120", "135", "150", "165", "180", "195", "210", "225", "240", "stage")
#create independent dfs for each study site and stage
pdHFSA_inc <- pdStage %>%
filter(study_site =="HFSA", stage == "incubation") %>%
select('15':'240')
pdHFSA_nest <- pdStage %>%
filter(study_site =="HFSA", stage == "nestling") %>%
select('15':'240')
pdMGSA_inc <- pdStage %>%
filter(study_site =="MGSA", stage == "incubation") %>%
select('15':'240')
pdMGSA_nest <- pdStage %>%
filter(study_site =="MGSA", stage == "nestling") %>%
select('15':'240')
# Chunk 6
meanHFSA_inc <- data.frame(
time = as.numeric(colnames(pdHFSA_inc)),
HGSA_incubation = colMeans(pdHFSA_inc, na.rm = TRUE))
meanHFSA_nest <- data.frame(
time = as.numeric(colnames(pdHFSA_nest)),
HGSA_nestling = colMeans(pdHFSA_nest, na.rm = TRUE))
meanMGSA_inc <- data.frame(
time = as.numeric(colnames(pdMGSA_inc)),
MGSA_incubation = colMeans(pdMGSA_inc, na.rm = TRUE))
meanMGSA_nest <- data.frame(
time = as.numeric(colnames(pdMGSA_nest)),
MGSA_nestling = colMeans(pdMGSA_nest, na.rm = TRUE))
# Chunk 8
meanAll <- data.frame(
time = as.numeric(colnames(pdHFSA_inc)),
HGSA_incubation = colMeans(pdHFSA_inc, na.rm = TRUE),
HGSA_nestling = colMeans(pdHFSA_nest, na.rm = TRUE),
MGSA_incubation = colMeans(pdMGSA_inc, na.rm = TRUE),
MGSA_nestling = colMeans(pdMGSA_nest, na.rm = TRUE)
)
# Chunk 9
#function to grab CIs from any vector
getCI <- function(vec, n_samp=10000) {
smp <- replicate(n_samp, mean(sample(vec, replace = TRUE), na.rm = TRUE))
CIs <-quantile(smp, c(0.025, 0.975), na.rm = T)
return(CIs)
}
#now apply it across the columns of PD data
ciHFSA_inc <- apply(pdHFSA_inc, 2, FUN = getCI)
ciHFSA_nest <- apply(pdHFSA_nest, 2, FUN = getCI)
ciMGSA_inc <- apply(pdMGSA_inc, 2, FUN = getCI)
ciMGSA_nest <- apply(pdMGSA_nest, 2, FUN = getCI)
# Chunk 10
ciInc <- filter(
data.frame(
study_area = c(rep("HFSA", nrow(meanHFSA_inc)), rep("MGSA", nrow(meanMGSA_inc))),
mean = c(colMeans(pdHFSA_inc, na.rm = TRUE), colMeans(pdMGSA_inc, na.rm = TRUE)),
ci_l = c(ciHFSA_inc[1,], ciMGSA_inc[1,]),
ci_h = c(ciHFSA_inc[2,], ciMGSA_inc[2,]),
time = c(as.numeric(rownames(meanHFSA_inc)), as.numeric(rownames(meanMGSA_inc))),
stage = "Incubation"),
time <= 180)
ciNest <- data.frame(
study_area = c(rep("HFSA", nrow(meanHFSA_nest)), rep("MGSA", nrow(meanMGSA_nest))),
mean = c(colMeans(pdHFSA_nest, na.rm = TRUE), colMeans(pdMGSA_nest, na.rm = TRUE)),
ci_l = c(ciHFSA_nest[1,], ciMGSA_nest[1,]),
ci_h = c(ciHFSA_nest[2,], ciMGSA_nest[2,]),
time = c(as.numeric(rownames(meanHFSA_nest)), as.numeric(rownames(meanMGSA_nest))),
stage = "Nestling")
ciAll <- rbind(ciInc, ciNest)
# Chunk 11
plotInc <- ggplot(data = ciInc) +
geom_point(aes(x = time, y = mean, color = study_area, group = study_area),
position = position_dodge(width=0.75)) +
geom_errorbar(aes(x=time, ymax = ci_h, ymin=ci_l, color = study_area,
group = study_area),
position = position_dodge(width=0.75)) +
labs(x = "Time After Sunset (minutes)", y = "Mean Prey Deliveries",
title = "Incubation", color = "Study Area") +
theme_minimal()
# Chunk 12
plotNest <- ggplot(data = ciNest) +
geom_point(aes(x = time, y = mean, color = study_area, group = study_area),
position = position_dodge(width=0.75)) +
geom_errorbar(aes(x=time, ymax = ci_h, ymin=ci_l, color = study_area,
group = study_area),
position = position_dodge(width=0.75)) +
labs(x = "Time After Sunset (minutes)", y = "Mean Prey Deliveries",
title = "Nestling", color = "Study Area") +
theme_minimal()
# Chunk 13
plotAll <- ggplot(data = ciAll) +
geom_point(aes(x = time, y = mean, color = study_area, group = study_area),
position = position_dodge(width=0.75)) +
geom_errorbar(aes(x=time, ymax = ci_h, ymin=ci_l, color = study_area,
group = study_area),
position = position_dodge(width=0.75)) +
labs(x = "Time After Sunset (minutes)", y = "Mean Prey Deliveries",
title = "Average Prey Deliveries Throughout Night", color = "Study Area") +
theme_minimal() +
facet_grid(~ stage)
# Chunk 14
plot(plotNest)
plot(plotInc)
par(mfrow = c(1, 2))
# Chunk 15
par1 <- par(mfrow = c(1, 2))
plot(plotNest)
plot(plotInc)
par(par1)
library(gridExtra)
#install.packages("tidyverse")
install.packages("gridExtra")
install.packages("gridExtra")
library(gridExtra)
library(tidyverse)
sessionInfo()
?grid.arrange
grid.arrange(plotNest, plotInc)
grid.arrange(plotNest, plotInc)
plotInc <- ggplot(data = ciInc) +
geom_point(aes(x = time, y = mean, color = study_area, group = study_area),
position = position_dodge(width=0.75)) +
geom_errorbar(aes(x=time, ymax = ci_h, ymin=ci_l, color = study_area,
group = study_area),
position = position_dodge(width=0.75)) +
labs(x = "Time After Sunset (minutes)", y = "Mean Prey Deliveries",
title = "Incubation", color = "Study Area") +
theme_minimal() +
element_text(): p + theme(plot.title = element_text(hjust = 0.5))
plotInc <- ggplot(data = ciInc) +
geom_point(aes(x = time, y = mean, color = study_area, group = study_area),
position = position_dodge(width=0.75)) +
geom_errorbar(aes(x=time, ymax = ci_h, ymin=ci_l, color = study_area,
group = study_area),
position = position_dodge(width=0.75)) +
labs(x = "Time After Sunset (minutes)", y = "Mean Prey Deliveries",
title = "Incubation", color = "Study Area") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
View(plotInc)
plotInc
plotNest <- ggplot(data = ciNest) +
geom_point(aes(x = time, y = mean, color = study_area, group = study_area),
position = position_dodge(width=0.75)) +
geom_errorbar(aes(x=time, ymax = ci_h, ymin=ci_l, color = study_area,
group = study_area),
position = position_dodge(width=0.75)) +
labs(x = "Time After Sunset (minutes)", y = "Mean Prey Deliveries",
title = "Nestling", color = "Study Area") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
plotAll <- ggplot(data = ciAll) +
geom_point(aes(x = time, y = mean, color = study_area, group = study_area),
position = position_dodge(width=0.75)) +
geom_errorbar(aes(x=time, ymax = ci_h, ymin=ci_l, color = study_area,
group = study_area),
position = position_dodge(width=0.75)) +
labs(x = "Time After Sunset (minutes)", y = "Mean Prey Deliveries",
title = "Average Prey Deliveries Throughout Night", color = "Study Area") +
theme_minimal() +
facet_grid(~ stage)
grid.arrange(plotNest, plotInc)
plotAll
plotAll <- ggplot(data = ciAll) +
geom_point(aes(x = time, y = mean, color = study_area, group = study_area),
position = position_dodge(width=0.75)) +
geom_errorbar(aes(x=time, ymax = ci_h, ymin=ci_l, color = study_area,
group = study_area),
position = position_dodge(width=0.75)) +
labs(x = "Time After Sunset (minutes)", y = "Mean Prey Deliveries",
title = "Average Prey Deliveries Throughout Night", color = "Study Area") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
facet_grid(~ stage)
plotAll
grid.arrange(plotNest, plotInc)
#Spatial data analysis
#install.packages("raster")
library(raster)
# APIs
#install.packages("jsonlite")
library(jsonlite)
dataFire <- httr::GET('https://services.arcgis.com/4OV0eRKiLAYkbH2J/arcgis/rest/services/Monitoring_Trends_in_Burn_Severity_MTBS_Perimeters_1984_2014/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json')
str(dataFire)
fire <- httr::GET('https://services.arcgis.com/4OV0eRKiLAYkbH2J/arcgis/rest/services/Monitoring_Trends_in_Burn_Severity_MTBS_Perimeters_1984_2014/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json')
names(fire)
fireInfo <- vonInfo <- jsonlite::fromJSON(content(von, "text"), simplifyVector = FALSE)
fireInfo <- vonInfo <- jsonlite::fromJSON(content(fire, "text"), simplifyVector = FALSE)
library(httr)
fire <- httr::GET('https://services.arcgis.com/4OV0eRKiLAYkbH2J/arcgis/rest/services/Monitoring_Trends_in_Burn_Severity_MTBS_Perimeters_1984_2014/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json')
fireInfo <- vonInfo <- jsonlite::fromJSON(content(fire, "text"), simplifyVector = FALSE)
names(fireInfo)
names(fireInfo$geometryType)
View(fireInfo)
fireInfo[["geometryType"]]
getwd()
raster("analysis/images/hayman")
# Spatial data analysis
#install.packages("raster")
install.packages("sf")
# Spatial data analysis
#install.packages("raster")
#install.packages("sf")
library(sf)
fireSF <- st_read("analysis/images/hayman.shp")
View(fireSF)
st_geometry_type(fireSF)
# Get extent
st_bbox(fireSF)
ggplot() +
geom_sf(data = fireSF, size = 3, color = "black", fill = "red") +
ggtitle("Hayman Fire Scar") +
coord_sf()
ggplot() +
geom_sf(data = fireSF, size = 1, color = "black", fill = "red") +
ggtitle("Hayman Fire Scar") +
coord_sf()
ggplot() +
geom_sf(data = fireSF, size = 1, color = "black", fill = "red") +
ggtitle("Hayman Fire Scar") +
coord_sf() +
theme_minimal()
ggplot() +
geom_sf(data = fireSF, size = 1, color = "black", fill = "red") +
ggtitle("Hayman Fire Scar") +
coord_sf() +
theme_void()
ggplot() +
geom_sf(data = fireSF$Event_ID == "", size = 1, color = "black") +
ggtitle("Hayman Fire Scar") +
coord_sf() +
theme_void()
ggplot() +
geom_sf(data = fireSF, size = 1, color = "black") +
ggtitle("Hayman Fire Scar") +
coord_sf() +
theme_void()
ggplot() +
geom_sf(data = fireSF, size = 1, color = "black") +
ggtitle("Hayman Fire Scar") +
coord_sf()
ggplot() +
geom_sf(data = fireSF, size = 1) +
ggtitle("Hayman Fire Scar") +
coord_sf()
ggplot() +
geom_sf(data = fireSF) +
ggtitle("Hayman Fire Scar") +
coord_sf()
#change hayman boundary class from `sf` to `spatial`
fireSP <- as(fireSF, "Spatial")
plot(fireSF, col = rev(brewer.pal(n = 11, name = "RdYlGn")))
#plot(locs_sf, add = T)
ggplot() +
geom_sf(data = fireSF, size = 1, color = "black") +
ggtitle("Hayman Fire Scar") +
coord_sf() +
theme_void()
plot(fireSF, col = rev(brewer.pal(n = 11, name = "RdYlGn")))
#plot(locs_sf, add = T)
??brewer.pal
# Spatial data analysis
#install.packages("raster")
#install.packages("sf")
install.packages("RColorBrewer")
library(RColorBrewer)
plot(fireSF, col = rev(brewer.pal(n = 11, name = "RdYlGn")))
#plot(locs_sf, add = T)
#change hayman boundary class from `sf` to `spatial`
fireSP <- as(fireSF, "Spatial")
plot(fireSP, col = rev(brewer.pal(n = 11, name = "RdYlGn")))
plot(locs_sf, add = T)
# Load shapefile
fireSF <- raster("analysis/images/hayman.shp")
# Load shapefile
fireSF <- raster("analysis/images/burn_severity/burn_severity.adf")
# Load Boundary
burn_boundary <- sf("analysis/images/hayman.shp")
# Load Boundary
burn_boundary <- st_read("analysis/images/hayman.shp")
burn_severity
burn_severity <- raster("analysis/images/burn_severity/burn_severity.adf")
burn_severity
ggplot() +
geom_sf(data = fireSF, size = 1, color = "black") +
geom_raster(data = burn_severity)
ggtitle("Hayman Fire Scar") +
coord_sf() +
theme_void()
plot(burn_severity)
ggplot() +
geom_sf(data = fireSF, size = 1, color = "black")
ggtitle("Hayman Fire Scar") +
coord_sf() +
theme_void()
ggplot() +
geom_raster(data = burn_severity)
ggplot() +
geom_raster(data = burn_severity)
plot(fireSF)
ggplot() +
geom_raster(data = burn_severity) +
coord_sf() +
theme_void()
plot(burn_severity)
plot(burn_boundary)
plot(firSF)
plot(burn_severity)
plot(fireSF)
ggplot() +
geom_raster(data = burn_severity, aes(x = x, y = y, fill = fct_elevation_2)) +
coord_quickmap()
